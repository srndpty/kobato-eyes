"""Stage responsible for persisting tagging results to the database."""

from __future__ import annotations

import logging
import os
import time
from dataclasses import dataclass
from typing import Protocol

from core.pipeline.types import IndexPhase, IndexProgress, PipelineContext, ProgressEmitter
from utils.env import safe_int

from ..maintenance import _settle_after_quiesce
from ..testhooks import TaggingDeps
from .tag_stage import TagStageResult

logger = logging.getLogger(__name__)


class WriteStageDeps(Protocol):
    """Protocol describing dependencies required by :class:`WriteStage`."""

    def build_writer(self, *, ctx: PipelineContext, progress_cb) -> "IDBWriterLike":
        ...

    def begin_quiesce(self) -> None:
        ...

    def end_quiesce(self) -> None:
        ...

    def connect(self, db_path: str):
        ...


class _DefaultWriteStageDeps:
    """Runtime dependency provider for :class:`WriteStage`."""

    def __init__(self, tagging_deps: TaggingDeps | None = None) -> None:
        self._deps = tagging_deps or TaggingDeps()

    def build_writer(self, *, ctx: PipelineContext, progress_cb):
        settings = ctx.settings
        return self._deps.dbwriter_factory(
            db_path=str(ctx.db_path),
            flush_chunk=getattr(settings, "db_flush_chunk", 1024),
            fts_topk=getattr(settings, "fts_topk", 128),
            queue_size=safe_int(os.environ.get("KE_DB_QUEUE"), 1024, min_value=1),
            default_tagger_sig=ctx.tagger_sig,
            unsafe_fast=True,
            skip_fts=True,
            progress_cb=progress_cb,
        )

    def begin_quiesce(self) -> None:
        self._deps.quiesce.begin()

    def end_quiesce(self) -> None:
        self._deps.quiesce.end()

    def connect(self, db_path: str):
        conn = self._deps.conn_factory(str(db_path))
        try:
            conn.close()
        except Exception:
            pass


@dataclass(slots=True)
class WriteStageResult:
    """Result produced by :class:`WriteStage`."""

    written: int
    fts_processed: int


class WriteStage:
    """Stage that writes tagging results via :class:`core.db_writer.DBWriter`."""

    def __init__(self, deps: WriteStageDeps | None = None) -> None:
        self._deps = deps or _DefaultWriteStageDeps()

    def run(
        self,
        ctx: PipelineContext,
        emitter: ProgressEmitter,
        tag_result: TagStageResult,
    ) -> WriteStageResult:
        """Persist DB items generated by :class:`TagStage`."""

        total = len(tag_result.db_items)
        emitter.emit(IndexProgress(phase=IndexPhase.FTS, done=0, total=total), force=True)
        if total == 0:
            return WriteStageResult(written=0, fts_processed=0)

        fts_processed = 0
        written = 0
        writer = None
        quiesced = False

        def _dbw_progress(kind: str, done: int, total_count: int) -> None:
            nonlocal fts_processed
            fts_processed = done
            emitter.emit(IndexProgress(phase=IndexPhase.FTS, done=done, total=total_count))
            try:
                logger.info("finalizing: %s %d/%d", kind.split(".")[0], done, total_count)
            except Exception:
                pass

        try:
            self._deps.connect(str(ctx.db_path))
            self._deps.begin_quiesce()
            quiesced = True

            writer = self._deps.build_writer(ctx=ctx, progress_cb=_dbw_progress)
            writer.start()
            time.sleep(0.2)
            writer.raise_if_failed()

            for item in tag_result.db_items:
                if emitter.cancelled(ctx.is_cancelled):
                    break
                writer.put(item)
                written += 1

            writer.stop(flush=True, wait_forever=True)
            writer = None
            if quiesced:
                self._deps.end_quiesce()
                quiesced = False
            try:
                _settle_after_quiesce(str(ctx.db_path))
            except Exception:
                logger.warning("settle_after_quiesce failed; continuing")

            emitter.emit(IndexProgress(phase=IndexPhase.FTS, done=written, total=total), force=True)
            return WriteStageResult(written=written, fts_processed=max(fts_processed, written))
        except Exception as exc:
            logger.exception("Write stage failed: %s", exc)
            return WriteStageResult(written=written, fts_processed=fts_processed)
        finally:
            if writer is not None:
                try:
                    writer.stop(flush=True, wait_forever=True)
                except Exception:
                    pass
            if quiesced:
                try:
                    self._deps.end_quiesce()
                except Exception:
                    logger.exception("end_quiesce failed")
            try:
                _settle_after_quiesce(str(ctx.db_path))
            except Exception:
                logger.warning("settle_after_quiesce failed; continuing")


__all__ = ["WriteStage", "WriteStageResult", "WriteStageDeps"]
